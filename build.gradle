buildscript {
	repositories {
		maven { url = "https://maven.minecraftforge.net/" }
		maven { url = 'https://maven.parchmentmc.org' }
		mavenCentral()
	}

	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
		classpath 'org.parchmentmc:librarian:1.+'
	}
}

plugins {
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'

group = "jeresources"
archivesBaseName = "JustEnoughResources-" + version_minecraft

version = version_major + '.' + version_minor + '.' + version_revis

//adds the build number to the end of the version string if on a build server
if (System.getenv('TRAVIS_BUILD_NUMBER') != null) {
    version += ".${System.getenv('TRAVIS_BUILD_NUMBER')}"
}

repositories {
    maven {
        name = "jei"
        url =  "https://dvs1.progwml6.com/files/maven"
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
		resources {
			srcDir 'src/generated/resources'
		}
	}
}

configurations {
	apiImplementation.extendsFrom(implementation)
	apiRuntimeOnly.extendsFrom(runtimeOnly)
}

dependencies {
	minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"
	compileOnly fg.deobf("mezz.jei:jei-${version_minecraft}-forge:${version_jei}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${version_minecraft}-forge:${version_jei}")
}

minecraft {
	mappings channel: "${channel_mapping}", version: "${version_mapping}"

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			// recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('run')
			mods {
				jeresources {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
		server {
			// recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('run')
			mods {
				jeresources {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
		data {
			// recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', 'jeresources', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			mods {
				jeresources {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

javadoc {
	source = [sourceSets.main.allJava, sourceSets.api.allJava]
	// prevent java 8's strict doclint for javadocs from failing builds
	options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
	from sourceSets.main.output
	from sourceSets.api.output

	manifest {
		attributes([
				"Specification-Title": "Just Enough Resources",
				"Specification-Vendor": "way2muchnoise",
				"Specification-Version": project.version,
				"Implementation-Title": project.name,
				"Implementation-Version": project.version,
				"Implementation-Vendor" :"way2muchnoise",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		])
	}

	destinationDir(file(rootProject.getRootDir().getPath() + '/output'))

	finalizedBy('reobfJar')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('javadoc')
	from javadoc.destinationDir
	destinationDir(file(rootProject.getRootDir().getPath() + '/output'))
}

task sourcesJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('sources')
	from sourceSets.main.allJava
	from sourceSets.api.allJava
	destinationDir(file(rootProject.getRootDir().getPath() + '/output'))
}

task apiJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('api')
	from sourceSets.api.output
	afterEvaluate { finalizedBy reobfApiJar }
	destinationDir(file(rootProject.getRootDir().getPath() + '/output'))

	// TODO: when FG bug is fixed, remove allJava from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.api.allJava
}

task deobfJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('deobf')
	from sourceSets.main.output
	from sourceSets.api.output
}

artifacts {
	archives jar, javadocJar, sourcesJar, apiJar, deobfJar
}

reobf {
	apiJar { classpath.from(sourceSets.api.compileClasspath) }
	jar { classpath.from(sourceSets.main.compileClasspath) }
}

task reobf {
	dependsOn reobfJar
	dependsOn reobfApiJar
}


curseforge {
    apiKey = System.getenv('CURSE_KEY') == null ? '0' : System.getenv('CURSE_KEY')
    project {
        id = curse_project_id
        changelog = System.getenv('CHANGELOG') == null ? '' : System.getenv('CHANGELOG')
        changelogType = 'markdown'
        releaseType =  'alpha'
		addGameVersion "${version_minecraft}"
        mainArtifact (jar) {
            displayName = "${jar.archiveFileName.get()}".replace(".jar", "")
			relations {
				requiredDependency 'jei'
			}
        }
        addArtifact (javadocJar) {
            displayName = "${javadocJar.archiveFileName.get()}".replace(".jar", "")
        }
        addArtifact (sourcesJar) {
            displayName = "${sourcesJar.archiveFileName.get()}".replace(".jar", "")
        }
        addArtifact (apiJar) {
            displayName = "${apiJar.archiveFileName.get()}".replace(".jar", "")
        }
        addArtifact (deobfJar) {
			displayName = "${deobfJar.archiveFileName.get()}".replace(".jar", "")
		}
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            artifact javadocJar
            artifact sourcesJar
            artifact apiJar
            artifact jar
        }
    }
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
		for (String excludeDirName in ["run", "out", "ouput", "logs", "gradle"]) {
			File excludeDir = new File(projectDir, excludeDirName)
			excludeDirs.add(excludeDir)
		}
	}
}
